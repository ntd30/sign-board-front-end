import { DeleteOutlined, EditOutlined } from "@ant-design/icons";
import { notification, Popconfirm, Space, Table, Input } from "antd";
import { useState } from "react";
import ProductUpdate from "./product.update";
import { deleteProductAPI } from "../../../services/api.service";

const { Search } = Input;

// Repository ƒë·ªÉ qu·∫£n l√Ω c√°c thao t√°c v·ªõi s·∫£n ph·∫©m
const ProductRepository = {
    deleteProduct: async (id) => {
        try {
            const res = await deleteProductAPI(id);
            return res;
        } catch (error) {
            throw error;
        }
    },
};

const ProductTable = (props) => {
    const { dataProducts, loadProducts, current, setCurrent, pageSize, setPageSize, total, loadingTable, dataCategories, permissionsOfCurrentUser, searchTerm, setSearchTerm } = props;

    const [isDetailOpen, setIsDetailOpen] = useState(false);
    const [isUpdateOpen, setIsUpdateOpen] = useState(false);
    const [dataUpdate, setDataUpdate] = useState(null);

    // Debug: Ki·ªÉm tra permissions ƒë∆∞·ª£c truy·ªÅn v√†o
    console.log("üîê Permissions in ProductTable:", permissionsOfCurrentUser);
    console.log("üìä Total products:", dataProducts?.length || 0);
    console.log("üîç Search term:", searchTerm);
console.log("dataupdate", dataUpdate);  
    const onChange = (pagination) => {
        if (+pagination.current !== +current) {
            setCurrent(+pagination.current);
        }
        if (+pagination.pageSize !== +pageSize) {
            setPageSize(+pagination.pageSize);
        }
    };

    const handleSearch = (value) => {
        setSearchTerm(value);
    };

    const handleGetDetailProduct = (record) => {
        setDataUpdate(record);
        setIsDetailOpen(true);
    };

    const handleEditProduct = (record) => {
        setDataUpdate(record);
        setIsUpdateOpen(true);
    };

    const handleDeleteProduct = async (idDelete) => {
        try {
            const res = await ProductRepository.deleteProduct(idDelete);
            if (res) {
                notification.success({
                    message: "X√≥a S·∫£n ph·∫©m",
                    description: "X√≥a S·∫£n ph·∫©m th√†nh c√¥ng!",
                });
                await loadProducts();
            } else {
                throw new Error("X√≥a S·∫£n ph·∫©m th·∫•t b·∫°i!");
            }
        } catch (error) {
            notification.error({
                message: "L·ªói khi x√≥a S·∫£n ph·∫©m",
                description: error.message || "X√≥a S·∫£n ph·∫©m th·∫•t b·∫°i!",
            });
        }
    };

    const columns = [
        {
            title: "STT",
            render: (_, record, index) => index + 1 + pageSize * (current - 1),
            width: 70,
        },
        {
            title: "Id",
            dataIndex: "id",
            render: (text, record) => (
                <a onClick={() => handleGetDetailProduct(record)}>{text}</a>
            ),
            hidden: true,
        },
        {
            title: "·∫¢nh s·∫£n ph·∫©m",
            dataIndex: "images",
            render: (text, record) => {
                const image = record.images && record.images[0]; // L·∫•y ·∫£nh ƒë·∫ßu ti√™n
                if (image && image.imageBase64) {
                    // ∆Øu ti√™n hi·ªÉn th·ªã ·∫£nh Base64
                    return (
                        <img
                            src={`data:image/jpeg;base64,${image.imageBase64}`}
                            style={{ width: "100%", height: 200, objectFit: "contain", display: "block" }}
                            alt="Product"
                        />
                    );
                } else if (image && image.imageUrl) {
                    // Fallback v·ªÅ imageUrl n·∫øu Base64 kh√¥ng c√≥
                    return (
                        <img
                            src={`${import.meta.env.VITE_BACKEND_URL}/images/${image.imageUrl}`}
                            style={{ width: "100%", height: 200, objectFit: "contain", display: "block" }}
                            alt="Product"
                        />
                    );
                } else {
                    // Hi·ªÉn th·ªã ·∫£nh placeholder n·∫øu c·∫£ hai kh√¥ng c√≥
                    return (
                        <img
                            src="https://via.placeholder.com/150?text=No+Image"
                            style={{ width: "100%", height: 200, objectFit: "contain", display: "block" }}
                            alt="No Image"
                        />
                    );
                }
            },
            width: 220,
        },
        {
            title: "T√™n s·∫£n ph·∫©m",
            dataIndex: "name",
            render: (text, record) => (
                <a onClick={() => handleGetDetailProduct(record)}>{text}</a>
            ),
            width: 200,
        },
        {
            title: "M√¥ t·∫£",
            dataIndex: "description",
            width: 300,
            ellipsis: true,
        },
        {
            title: "·∫¢nh",
            dataIndex: "image",
            render: (_, record) => { },
            hidden: true,
        },
        {
            title: "Danh m·ª•c",
            dataIndex: "category",
            render: (_, record) => record.category?.name,
            width: 150,
        },
        {
            title: "K√≠ch th∆∞·ªõc",
            dataIndex: "dimensions",
            width: 120,
        },
        {
            title: "Ng√†y t·∫°o",
            dataIndex: "createdAt",
            width: 150,
        },
        {
            title: "Ng√†y c·∫≠p nh·∫≠t",
            dataIndex: "updatedAt",
            width: 150,
        },
        {
            title: "Action",
            render: (_, record) => {
                // Debug: Ki·ªÉm tra ƒëi·ªÅu ki·ªán hi·ªÉn th·ªã c√°c n√∫t
                const hasUpdatePermission = permissionsOfCurrentUser.includes("PRODUCT_UPDATE");
                const hasDeletePermission = permissionsOfCurrentUser.includes("PRODUCT_DELETE");

                console.log("üîß Record ID:", record.id, "Has UPDATE permission:", hasUpdatePermission, "Has DELETE permission:", hasDeletePermission);

                return (
                    <Space size="middle" style={{ gap: "20px" }}>
                        {hasUpdatePermission && (
                            <EditOutlined
                                style={{ color: "orange", cursor: "pointer" }}
                                onClick={() => handleEditProduct(record)}
                            />
                        )}
                        {hasDeletePermission && (
                            <Popconfirm
                                title="X√≥a S·∫£n ph·∫©m"
                                description="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a S·∫£n ph·∫©m n√†y?"
                                onConfirm={() => handleDeleteProduct(record.id)}
                                onCancel={() => { }}
                                okText="X√°c nh·∫≠n"
                                cancelText="H·ªßy"
                                placement="left"
                            >
                                <DeleteOutlined style={{ color: "red", cursor: "pointer" }} />
                            </Popconfirm>
                        )}
                        {!hasUpdatePermission && !hasDeletePermission && (
                            <span style={{ color: "gray", fontSize: "12px" }}>Kh√¥ng c√≥ quy·ªÅn</span>
                        )}
                    </Space>
                );
            },
            width: 120,
        },
    ];

    return (
        <>
            <div style={{ marginBottom: 16 }}>
                <Search
                    placeholder="T√¨m ki·∫øm theo t√™n, m√¥ t·∫£, danh m·ª•c, k√≠ch th∆∞·ªõc, ng√†y t·∫°o ho·∫∑c ng√†y c·∫≠p nh·∫≠t"
                    allowClear
                    enterButton="T√¨m ki·∫øm"
                    size="large"
                    onSearch={handleSearch}
                    onChange={(e) => handleSearch(e.target.value)}
                    value={searchTerm}
                />
            </div>
            <Table
                dataSource={dataProducts}
                columns={columns}
                pagination={{
                    current: current,
                    pageSize: pageSize,
                    showSizeChanger: true,
                    total: total,
                    showTotal: (total, range) => (
                        <div>
                            {range[0]}-{range[1]} tr√™n {total} rows
                        </div>
                    ),
                }}
                onChange={onChange}
                loading={loadingTable}
                scroll={{ x: 1200 }}
                size="small"
                className="responsive-table"
            />
            <ProductUpdate
                isUpdateOpen={isUpdateOpen}
                setIsUpdateOpen={setIsUpdateOpen}
                dataUpdate={dataUpdate}
                loadProducts={loadProducts}
                dataCategories={dataCategories}
            />
            <style jsx>{`
                .responsive-table :global(.ant-table) {
                    min-width: 100%;
                }
                @media (max-width: 768px) {
                    .responsive-table :global(.ant-table) {
                        font-size: 12px;
                    }
                    .responsive-table :global(.ant-table-cell) {
                        padding: 8px !important;
                    }
                }
            `}</style>
        </>
    );
};

export default ProductTable;